# Tree Idler Vanilla JS Testing Framework Plan

## 1. Goals
- No Node.js or external dependencies
- All tests run in the browser (open a test HTML file)
- Support for unit, integration, and UI/component tests
- Simple, readable test syntax (test, assert, etc.)
- Console and basic HTML reporting
- Easy to extend for future needs (accessibility, e2e, etc.)

## 2. Core Components
- test-runner.html: Loads the test framework and all test files
- test-runner.js: Discovers and runs tests, reports results
- test-framework.js: Provides test(), assert(), beforeEach(), afterEach(), etc.
- Example test files: *.test.js (e.g., EventBus.test.js, Resources.test.js, UI.test.js)

## 3. Features & Checklist
- [ ] test() function for defining tests
- [ ] assert() and related helpers (assertEqual, assertThrows, etc.)
- [ ] beforeEach/afterEach hooks
- [ ] Grouping (describe/it or similar)
- [ ] Async test support (Promise/async)
- [ ] Console output (pass/fail, summary)
- [ ] HTML output (optional, for visual feedback)
- [ ] Automatic discovery of *.test.js files
- [ ] Support for testing ES modules and Web Components
- [ ] Example tests for each major module (EventBus, Resources, UI, etc.)
- [ ] Documentation: How to write and run tests

## 4. Roadmap
- [ ] Implement core test framework (test, assert, hooks)
- [ ] Create test-runner.html and test-runner.js
- [ ] Write example unit test (EventBus)
- [ ] Write example integration test (Resources + Tree)
- [ ] Write example UI/component test (UI.js)
- [ ] Add async/Promise test support
- [ ] Add HTML reporting
- [ ] Add accessibility test helpers (tab order, ARIA, etc.)
- [ ] Document usage and conventions

## 5. Future Extensions
- [ ] Simulate user events for UI tests
- [ ] Visual regression (screenshot diff, manual)
- [ ] Accessibility audit helpers
- [ ] E2E flows (multi-panel, save/load, etc.)
- [ ] Coverage reporting (manual, via assertions)

## 6. Usage & Documentation

### How to Run Tests
- Open `testingframework/test-runner.html` in your browser.
- Test results will appear in the browser and in the console.

### How to Write a Test
- Create a new file in `testingframework/` ending with `.test.js`.
- Import the test framework:
  import { test, assert, describe, beforeEach, afterEach, ... } from './test-framework.js';
- Write tests using `test('name', fn)` and assertions like `assert`, `assertEqual`, `assertAria`, etc.
- Use `describe` to group related tests.
- Use `beforeEach`/`afterEach` for setup/teardown.
- Import the module you want to test using a relative path (e.g., `../lib/Module.js`).
- Add your new test file to the imports in `test-runner.js`.

### Example
```
import { test, assert, describe } from './test-framework.js';
import * as MyModule from '../lib/MyModule.js';

describe('MyModule', () => {
  test('does something', () => {
    assert(MyModule.someFunction() === 42, 'Should return 42');
  });
});
```

### Accessibility Helpers
- Use `assertAria(element, attr, expected)` to check ARIA attributes.
- Use `assertTabIndex(element, expected)` to check tabindex.
- Use `assertFocus(element)` to check focus.

### Adding New Tests
- Place new test files in `testingframework/`.
- Update `test-runner.js` to import your new test file.

---

## Next Steps
- Start with test-framework.js: implement test(), assert(), and basic reporting
- Create test-runner.html to load framework and test files
- Add a sample test file for EventBus
- Iterate and expand coverage
