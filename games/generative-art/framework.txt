# Generative Art Application Framework

```
index.html
├── styles.css (Main stylesheet)
├── js/main.js (Entry point)
│   ├── js/styles.js (Art style definitions)
│   │   └── js/styles-default.js (Default masterpiece style)
│   ├── js/palette.js (Color palette generation)
│   ├── js/state.js (State management)
│   ├── js/error-service.js (Error handling)
│   ├── js/utils.js (Utility functions)
│   ├── js/worker-manager.js (Web worker management)
│   ├── js/webgl-renderer.js (WebGL rendering)
│   └── js/ui/index.js (UI module entry point)
│       ├── js/ui/components.js (UI component management)
│       ├── js/ui/events.js (Event handling)
│       ├── js/ui/responsive.js (Responsive UI)
│       ├── js/ui/color-controls.js (Color controls)
│       ├── js/ui/canvas-controls.js (Canvas controls)
│       ├── js/ui/layer-controls.js (Layer controls)
│       └── js/ui/light-rays-controls.js (Light Rays controls)
├── js/layers/ (Layer modules)
│   ├── js/layers/dot-matrix.js
│   ├── js/layers/flowing-lines.js
│   ├── js/layers/fractal-lines.js
│   ├── js/layers/geometric-grid.js
│   ├── js/layers/glitch-mosaic.js
│   ├── js/layers/gradient-overlay.js
│   ├── js/layers/neon-waves.js
│   ├── js/layers/organic-noise.js
│   ├── js/layers/organic-splatters.js
│   ├── js/layers/particle-swarm.js
│   ├── js/layers/pixel-sort.js
│   ├── js/layers/symmetrical-patterns.js
│   ├── js/layers/texture-overlay.js
│   ├── js/layers/voronoi.js
│   └── js/layers/light-rays.js (Dramatic lighting effect)
```

## Data Flow

1. **Initialization Flow**:
   - `index.html` loads `js/main.js` as a module
   - `main.js` imports modules and initializes the application
   - UI components are initialized through `js/ui/index.js`
   - Event listeners are set up for user interactions
   - Initial artwork is generated

2. **Rendering Flow**:
   - User adjusts parameters or randomizes seed
   - State is updated in `state.js`
   - `drawArtwork()` function in `main.js` is called
   - Default masterpiece style rendering function is called
   - Layers are rendered in sequence from `js/layers/`
   - Canvas is updated with the new artwork

3. **Save Artwork Flow**:
   - User clicks "Save Artwork" button
   - Canvas content is converted to a data URL
   - Browser downloads the image as a PNG file

## Enhanced Visual Effects

The application includes several advanced visual effects to create more impressive artwork:

1. **Neon Waves Layer**:
   - Implements advanced glow effects with multiple passes
   - Variable wave thickness and depth perception
   - Complex wave patterns with multiple sine wave combinations
   - Smooth animation with realistic light behavior

2. **Fractal Lines Layer**:
   - Enhanced recursive branching with variable complexity
   - Color transitions along fractal paths
   - Glow effects with variable intensity
   - Improved composition with intentional starting points

3. **Light Rays Layer**:
   - Dramatic crepuscular/god rays effect
   - Customizable direction, spread, and intensity
   - Interactive preview for direction control
   - Realistic light source glow

## GitHub Pages Compatibility

The application is designed to be compatible with GitHub Pages hosting:
- All file paths use relative URLs (e.g., `./js/main.js` instead of `/js/main.js`)
- No server-side dependencies or code
- All resources are loaded using client-side JavaScript
- Application state is stored in localStorage
- All functionality works in a static hosting environment