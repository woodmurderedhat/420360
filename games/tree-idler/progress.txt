1. Analyze current tree growth logic in Tree.js and identify all procedural growth code.
2. Research and outline the Saplings Growing Up Algorithm and sunray-based growth algorithms suitable for simulation.

- Saplings Growing Up Algorithm: Models tree growth as a series of stages, where each stage increases trunk height, branch complexity, and resource slots (leaves, roots, fruits, critters). Growth is recursive, with parameters for trunk/branch length, width, angle, and branching factor. Each stage unlocks new features and visual complexity.
- Sunray-based Growth Algorithm: Simulates the effect of sunlight direction and intensity on branch and leaf growth. Branches and leaves grow more towards the light source, with parameters for sun angle, intensity, and shadowing. This can be implemented by biasing branch angles and leaf density towards the sun direction, and reducing growth in shaded areas.
- Integration: The simulator should allow dynamic adjustment of growth parameters based on stage, season, sunlight, and species. The algorithms should be modular, allowing for future extension (e.g., wind, weather, species traits).

3. Design a new modular file (TreeGrowthSimulator.js) to encapsulate all tree growth logic, exposing a clean API.

- File: lib/TreeGrowthSimulator.js
- Exports:
  - createSimulator(options): Initializes a simulator instance with parameters (species, sunlight, season, etc.).
  - getGrowthParameters(stage, sunlight, season, species): Returns parameters for trunk, branches, leaves, roots, etc., using Saplings and sunray-based logic.
  - renderTree(ctx, width, height, state): Draws the tree on a canvas using the current state and growth parameters.
  - simulateGrowth(state, delta): Advances the tree state by delta time or resources, updating stage and slots.
- Internals:
  - Implements recursive branching, sunray bias, and dynamic slot unlocking.
  - Modular for future extension (wind, weather, species traits).

4. Refactor Tree.js to delegate all growth rendering and simulation to the new module.
5. Implement the Saplings Growing Up Algorithm in the new module, supporting dynamic growth stages and branching.
6. Integrate sunray-based growth effects, allowing sunlight direction/intensity to influence growth patterns.
7. Ensure the new module supports dynamic parameters (species, stage, season, etc.) for extensibility.
- Refactor TreeGrowthSimulator.js to accept and use dynamic parameters for species, stage, season, sunlight, and future extensibility (e.g., weather, upgrades).
- Allow easy extension for new tree types and environmental effects.

8. Update event handling and UI rendering to use the new simulator.
- Ensure UI.js and event handlers pass all relevant parameters (species, sunlight, season, etc.) to the simulator.
- Update UI rendering logic to reflect new growth and sunray effects.
- Test integration to confirm correct rendering and parameter flow.

Next: Implement dynamic parameter support in TreeGrowthSimulator.js and update UI integration.
9. Test and validate the new growth system for visual and gameplay consistency.
10. Document the new architecture and algorithms for future maintainability.

11. Implement Seasons & Weather System
- Add a modular weather system (Weather.js) as a plugin, following the plugin lifecycle (install, activate, deactivate).
- Emit weather events (rain, drought, frost) that affect resource rates and tree visuals.
- Integrate with TreeGrowthSimulator.js to visually reflect weather (e.g., rain animation, frost overlay).
- Use EventBus for decoupled communication (e.g., 'weatherChanged', 'weatherEvent').

12. Expand Multiple Tree Species
- Allow unlocking and switching between tree species (Oak, Willow, Pine, etc.).
- Each species has unique growth parameters and perks.
- UI for species selection and display of species-specific art.

13. Achievement Garden Expansion
- Add more milestone trophies and unlockable tree statues.
- Visual display of rare/legendary achievements in the garden panel.

14. Automated Testing & QA
- Add/expand tests for new weather, species, and achievement features.
- Ensure all new UI components and plugins are covered by integration and UI tests.

Next: Begin with step 11, implementing the modular Seasons & Weather system as a plugin, following the framework and event-driven architecture.
